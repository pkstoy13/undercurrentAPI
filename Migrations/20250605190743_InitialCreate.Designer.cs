// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using undercurrentAPI.Data;

#nullable disable

namespace undercurrentAPI.Migrations
{
    [DbContext(typeof(ArtistDbContext))]
    [Migration("20250605190743_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("ArtistStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Comments")
                        .HasColumnType("integer");

                    b.Property<int?>("Followers")
                        .HasColumnType("integer");

                    b.Property<int?>("Likes")
                        .HasColumnType("integer");

                    b.Property<int?>("MonthlyListeners")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlatformAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformAccountId");

                    b.ToTable("ArtistStats");
                });

            modelBuilder.Entity("DiscoveryScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<double?>("EngagementScore")
                        .HasColumnType("double precision");

                    b.Property<double?>("GrowthScore")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ScoreDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("UndergroundScore")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("DiscoveryScores");
                });

            modelBuilder.Entity("PlatformAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("PlatformAccounts");
                });

            modelBuilder.Entity("Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTopTrack")
                        .HasColumnType("boolean");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlatformAccountId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PlayCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlatformAccountId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("ArtistStat", b =>
                {
                    b.HasOne("PlatformAccount", "PlatformAccount")
                        .WithMany("Stats")
                        .HasForeignKey("PlatformAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformAccount");
                });

            modelBuilder.Entity("DiscoveryScore", b =>
                {
                    b.HasOne("Artist", "Artist")
                        .WithMany("DiscoveryScores")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("PlatformAccount", b =>
                {
                    b.HasOne("Artist", "Artist")
                        .WithMany("PlatformAccounts")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Track", b =>
                {
                    b.HasOne("PlatformAccount", "PlatformAccount")
                        .WithMany("Tracks")
                        .HasForeignKey("PlatformAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformAccount");
                });

            modelBuilder.Entity("Artist", b =>
                {
                    b.Navigation("DiscoveryScores");

                    b.Navigation("PlatformAccounts");
                });

            modelBuilder.Entity("PlatformAccount", b =>
                {
                    b.Navigation("Stats");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
